[supervisord]
nodaemon=true
logfile=/var/log/supervisor/supervisord.log
pidfile=/var/run/supervisord.pid
user=root ; supervisor itself needs to run as root to manage processes that might need root (like Caddy for low ports initially)

[program:caddy]
command=/usr/bin/caddy run --config %(ENV_CADDY_CONFIG_FILE)s --adapter caddyfile --resume
directory=/
autostart=true
autorestart=true
# Redirect stdout (where Caddy will send JSON logs) to a file.
# stderr will still go to the container's error output for Caddy's own errors.
stdout_logfile=/var/log/caddy_access.json.log # File for JSON logs
stdout_logfile_maxbytes=50MB                  # Manage the log file size
stdout_logfile_backups=5                      # Number of backups to keep
stderr_logfile=/dev/stderr                    # Caddy errors will still go to stderr
stderr_logfile_maxbytes=0                     # No limit for stderr
user=root ; Caddy can run as non-root if low ports are managed by setcap or if Caddy is reverse-proxied by another Caddy/proxy
            ; If Caddy must bind to ports < 1024 and setcap is not used or does not work, 'user=root' will be necessary.
            ; For now, we assume that ports 80/443 are mapped from the host to ports >1024 of the container
            ; OR that Caddy is launched as root for low ports, OR that setcap is used.
            ; For simplicity of startup, if Caddy must manage ports 80/443 directly: user=root
            ; If ports 80/443 are mapped on the host to ports >1024 in the container, appuser is ok.
            ; The safest for Caddy managing 80/443 is 'user=root' or setcap on the Caddy binary.
user=root


[program:flaskapp]
command=gunicorn --workers 4 --bind 0.0.0.0:%(ENV_FLASK_PORT)s app:app
directory=%(ENV_FLASK_APP_DIR)s
autostart=true
autorestart=true
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
user=appuser
environment=FLASK_SECRET_KEY="%(ENV_FLASK_SECRET_KEY)s",APP_DATA_DIR="%(ENV_APP_DATA_DIR)s",CADDY_CONFIG="%(ENV_CADDY_CONFIG_FILE)s",FLASK_PORT="%(ENV_FLASK_PORT)s"
; Note: FLASK_SECRET_KEY MUST be provided via `docker run -e FLASK_SECRET_KEY=your_strong_secret`
; The other environment variables are defined in the Dockerfile or here for clarity.
