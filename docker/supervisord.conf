[supervisord]
nodaemon=true
logfile=/var/log/supervisor/supervisord.log
pidfile=/var/run/supervisord.pid
user=root ; supervisor lui-même a besoin de s'exécuter en root pour gérer les processus qui pourraient avoir besoin de root (comme Caddy pour les ports bas initialement)

[program:caddy]
command=/usr/bin/caddy run --config %(ENV_CADDY_CONFIG_FILE)s --adapter caddyfile --resume
directory=/
autostart=true
autorestart=true
# Rediriger stdout (où Caddy enverra les logs JSON) vers un fichier.
# stderr ira toujours vers la sortie d'erreur du conteneur pour les erreurs de Caddy lui-même.
stdout_logfile=/var/log/caddy_access.json.log # Fichier pour les logs JSON
stdout_logfile_maxbytes=50MB                  # Gérer la taille du fichier log
stdout_logfile_backups=5                      # Nombre de backups à conserver
stderr_logfile=/dev/stderr                    # Les erreurs de Caddy iront toujours à stderr
stderr_logfile_maxbytes=0                     # Pas de limite pour stderr
user=root ; Caddy peut s'exécuter en non-root si les ports bas sont gérés par setcap ou si Caddy est reverse-proxyfié par un autre Caddy/proxy
            ; Si Caddy doit se lier aux ports < 1024 et que setcap n'est pas utilisé ou ne fonctionne pas, il faudra 'user=root'.
            ; Pour le moment, on suppose que les ports 80/443 sont mappés depuis l'hôte vers des ports >1024 du conteneur
            ; OU que Caddy est lancé en root pour les ports bas, OU que setcap est utilisé.
            ; Pour la simplicité du démarrage, si Caddy doit gérer les ports 80/443 directement : user=root
            ; Si les ports 80/443 sont mappés sur l'hôte à des ports >1024 dans le conteneur, appuser est ok.
            ; Le plus sûr pour Caddy gérant 80/443 est 'user=root' ou setcap sur le binaire Caddy.
user=root


[program:flaskapp]
command=gunicorn --workers 4 --bind 0.0.0.0:%(ENV_FLASK_PORT)s app:app
directory=%(ENV_FLASK_APP_DIR)s
autostart=true
autorestart=true
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
user=appuser
environment=FLASK_SECRET_KEY="%(ENV_FLASK_SECRET_KEY)s",APP_DATA_DIR="%(ENV_APP_DATA_DIR)s",CADDY_CONFIG="%(ENV_CADDY_CONFIG_FILE)s",FLASK_PORT="%(ENV_FLASK_PORT)s"
; Note: FLASK_SECRET_KEY DOIT être fournie via `docker run -e FLASK_SECRET_KEY=your_strong_secret`
; Les autres variables d'environnement sont définies dans le Dockerfile ou ici pour clarté.