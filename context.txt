# CaddyPanel Project Context (for LLM)

Entry point for work session. Objective: conciseness for AI, not for humans. Transmit all key information, without wasted tokens on formatting.

======================================================================
1. OPERATIONAL RULES
======================================================================

- Missing File: Report it, ask for its content, never invent it.
- File Modification: For a simple patch, provide a one-line `sed` command. If complex or risky, provide the full content of the file. Do not use other tools (`awk`, `patch`).
- Workflow: Propose a modification, then wait for the user's explicit agreement before continuing.
- Scope: Only modify what is strictly necessary for the requested task. No zeal.
- Verification: After each modification, suggest simple checkpoints or tests.


======================================================================
2. PROJECT TREE
======================================================================

📁 .github/
  📁 workflows/
    📄 docker-publish.yml
📁 caddyfile/
  📄 Caddyfile
📁 docker/
  📄 entrypoint.sh
  📄 supervisord.conf
📁 static/
  📄 script.js
  📄 style.css
📁 templates/
  📄 index.html
  📄 login.html
  📄 setup.html
  📄 stats.html
📄 .dockerignore
📄 .env
📄 app.py
📄 context.txt
📄 docker-compose.yml
📄 Dockerfile
📄 LICENSE
📄 README.md
📄 requirements.txt


======================================================================
3. NOTES ON FILES
======================================================================

- app.py: Flask backend. Serves UI/API. Manages users/prefs/Caddyfile. Triggers Caddy reload.
- Dockerfile: Multi-stage build of the Docker image. Retrieves Caddy, installs Python/dependencies/app.
- docker-compose.yml: Deployment orchestration. Defines service, volumes, reads the .env.
- docker/entrypoint.sh: Init script at container startup. Creates default configs, manages permissions.
- docker/supervisord.conf: Supervisor config. Manages `caddy` (root) and `flaskapp` (user) processes. Redirects logs.
- templates/: HTML templates (Jinja2) for Flask. (index, stats, login, setup).
- static/: Static files. `script.js` (UI logic, API, client-side Caddyfile parsing), `style.css` (themes).
- caddyfile/Caddyfile: Example Caddyfile for initialization.
- requirements.txt: Python dependencies (Flask).
- .env: Example file for environment variables (FLASK_SECRET_KEY, TZ).
- .dockerignore: Excludes unnecessary files from the Docker build.
- README.md: Build and execution instructions.
- context.txt: This file. Context for the LLM.
- .github/workflows/docker-publish.yml: GitHub Actions workflow to build and push the multi-arch Docker image to Docker Hub.


======================================================================
4. PROJECT STATUS
======================================================================

ACTIVE_BUGS:
- Stats/Logs: The statistics page does not display correctly or shows no data, suggesting a problem with the collection or processing of logs (`read_caddy_logs` in `app.py` or Caddy's logging configuration).

ROADMAP:
- Set up automated build and publication to Docker Hub via GitHub Actions.

IN_PROGRESS:
- None at the moment.

COMPLETED_FEATURES:
- Translation of French comments to English.
- Containerized architecture (Docker/Compose).
- Process management (Supervisor).
- Automatic initialization (entrypoint.sh).
- Data persistence (volumes).
- User authentication.
- Caddyfile management UI (Configurator + Raw Editor).
- Automatic saving and reloading of Caddy.
- Preferences management UI.
- Basic statistics page.
- Caddy log configuration wizard.
- Multi-architecture Docker build.
- BUGFIX: Correction of the state of the "Skip TLS Verify" checkbox in the UI.

======================================================================
5. MAINTENANCE RULES FOR THIS FILE
======================================================================

- Update this file with each modification (feature, bugfix).
- At the end of each session, provide the full and updated content of this file.
